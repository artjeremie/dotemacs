#+title: GNU Emacs Literate Configuration
#+author: hoaxdream
#+date: [2022-08-07 Sun]
#+description: Personal GNU Emacs Configuration for Windows 10
#+startup: overview

* Table of Contents                                                  :Toc:Quote:
:PROPERTIES:
:Visibility: folded
:END:

#+BEGIN_QUOTE
- [[#overview][Overview]]
- [[#elisp-header][Elisp header]]
- [[#better-defaults][Better defaults]]
  - [[#general-settings][General settings]]
  - [[#fonts][Fonts]]
  - [[#organize-directory][Organize directory]]
  - [[#garbage-collect][Garbage collect]]
  - [[#global-keybinds][Global keybinds]]
- [[#spell-check][Spell-check]]
- [[#dired][Dired]]
- [[#gnus][Gnus]]
- [[#feeds][Feeds]]
- [[#org-mode][Org-mode]]
  - [[#settings][Settings]]
  - [[#agenda][Agenda]]
  - [[#capture][Capture]]
  - [[#org-appear][Org-appear]]
  - [[#habit][Habit]]
- [[#calendar][Calendar]]
- [[#markdown][Markdown]]
- [[#snippet][Snippet]]
- [[#completion][Completion]]
  - [[#corfu][Corfu]]
  - [[#verticoco][Vertico&Co]]
- [[#languages][Languages]]
  - [[#lua][Lua]]
  - [[#python][Python]]
- [[#git][Git]]
  - [[#diff-hl][Diff-hl]]
- [[#misc][Misc]]
  - [[#emoji][Emoji]]
  - [[#helpful][Helpful]]
  - [[#toc][Toc]]
  - [[#olivetti][Olivetti]]
- [[#elisp-footer][Elisp footer]]
#+END_QUOTE

* Overview
This *Org* document is a literate configuration for GNU Emacs. Download and
install all packages with function =tlj-rebuild-pkg= =C-c u=. Code blocks written
here will automatically extracted after Emacs restart and will generate main
configuration =userconfig.el=.

* Elisp header
Header for =userconfig.el=.

#+begin_src emacs-lisp
;;; userconfig.el --- Emacs Personal Configuration -*- lexical-binding: t -*-

;; Copyright (C) 2022-2023 hoaxdream

;; Author: hoaxdream <hoaxdream@gmail.com>
;; URL: https://github.com/hoaxdream

;;; Commentary:

;; This file is NOT part of GNU Emacs.
;; This file has been generated from `README.org' *DO NOT EDIT*.

;;; Code:
#+end_src

* Better defaults
Keep it as minimal as possible and set some of the defaults here.

** General settings
Override some of the default settings.

#+begin_src emacs-lisp
(setq-default ad-redefinition-action 'accept)
(setq-default ring-bell-function 'ignore)
(setq-default cursor-in-non-selected-windows nil)
(setq-default cursor-type 'bar)
(setq-default fill-column 80)
(setq-default column-number-mode t)
(setq-default display-line-numbers-width 3)
(setq-default delete-by-moving-to-trash t)
(setq-default custom-unlispify-menu-entries nil)
(setq-default custom-unlispify-tag-nammes nil)
(setq-default gc-cons-threshold (* 8 1024 1024))
(setq-default help-window-select t)
(setq-default indent-tabs-mode nil)
(setq-default initial-scratch-message "")
(setq-default initial-major-mode 'org-mode)
(setq-default inhibit-compacting-font-caches t)
(setq-default mouse-yank-at-point t)
(setq-default read-process-output-max (* 1024 1024))
(setq-default scroll-margin 1)
(setq-default scroll-step 1)
(setq-default scroll-conservatively 101)
(setq-default scroll-preserve-screen-position 1)
(setq-default sentence-end-double-space nil)
(setq-default tab-width 4)
(setq-default electric-pair-preserve-balance nil)
(setq-default window-combination-resize t)
(setq-default auto-revert-verbose nil)
(blink-cursor-mode 0)
(electric-pair-mode t)
(global-auto-revert-mode)
(save-place-mode 1)
(mouse-avoidance-mode 'exile)
(set-default-coding-systems 'utf-8)
#+end_src

** Fonts
Default fonts for UI and emojis.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "Iosevka" :height 140)
(set-face-attribute 'fixed-pitch nil :family "Iosevka")
(set-face-attribute 'variable-pitch nil :family "Iosevka Aile")

(set-fontset-font t 'unicode (font-spec
                              :family "Segoe UI Emoji") nil 'prepend)
#+end_src

** Organize directory
I use =no-littering= to avoid all littering of files in =user-emacs-directory=.
Move customization settings in a temporary file *custom.el* to keep it clean,
and set good defaults for backup files.

#+begin_src emacs-lisp
(require 'no-littering)

(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(setq version-control t)
(setq backup-by-copying t)
(setq delete-old-versions t)
(setq kept-new-versions 2)
(setq kept-old-versions 2)
(setq auto-save-default nil)
(setq create-lockfiles nil)
(setq auto-save-list-file-prefix nil)
(setq mode-require-final-newline nil)
(setq large-file-warning-threshold nil)
#+end_src

** Garbage collect
Garbage-collect on focus out, Emacs /should/ feel snappier overall.

#+begin_src emacs-lisp
(add-function :after after-focus-change-function
              (defun tlj-garbage-collect-maybe ()
                (unless (frame-focus-state)
                  (garbage-collect))))
#+end_src

** Global keybinds
Set and unset some keyinds.

#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-z"))

(windmove-default-keybindings 'ctrl)

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

(global-set-key (kbd "C-h K") 'describe-keymap)

(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-0") 'text-scale-set)
#+end_src

* Spell-check
Download [[https://sourceforge.net/projects/ezwinports/files/][hunspell-bin.zip]].

#+begin_src emacs-lisp
(setq-default ispell-program-name "c:/Users/hoaxdream/hunspell/bin/hunspell")
(setq ispell-personal-dictionary "en_US")
(setq-default ispell-local-dictionary "en_US")
(setq-default ispell-local-dictionary-alist
              '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil
                 ("-d" "en_US") nil utf-8)))

(global-set-key (kbd "C-c d") 'flyspell-mode)

(with-eval-after-load 'flyspell
  (when (boundp 'flyspell-mode-map)
    (define-key flyspell-mode-map (kbd "C-c b") 'flyspell-buffer)
    (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)))
#+end_src

* Dired
Convenient way to manage files and directories inside Emacs.

#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (require 'dired-narrow)
  (setq-default dired-auto-revert-buffer t)
  (setq-default dired-dwim-target t)
  (setq-default dired-deletion-confirmer 'y-or-n-p)
  (setq-default dired-hide-details-hide-symlink-targets nil)
  (setq-default dired-kill-when-opening-new-dired-buffer t)
  (when (boundp 'dired-mode-map)
    (define-key dired-mode-map (kbd "<backspace>") 'dired-up-directory)
    (define-key dired-mode-map (kbd "/") 'dired-narrow))
  (add-hook 'dired-mode-hook 'dired-hide-details-mode))

(with-eval-after-load 'dired
  (require 'dired-subtree)
  (setq-default dired-subtree-use-backgrounds nil)
  (when (boundp 'dired-mode-map)
    (define-key dired-mode-map (kbd "<tab>") 'dired-subtree-toggle)))

(global-set-key (kbd "C-c t") 'dired-sidebar-toggle-sidebar)
#+end_src

* Gnus
Emacs package for reading and sending e-mail.

| *Keybind* | *Command*                          | *Description*  |
|---------+----------------------------------+--------------|
| =[#]=     | gnus-summary-mark-as-processable | /Mark mail/    |
| =[B DEL]= | gnus-summary-delete-article      | /Delete mail/  |
| =[B m]=   | gnus-summary-move-article        | /Move mail/    |
| =[m]=     | gnus-summary-mail-other-window   | /Compose mail/ |

#+begin_src emacs-lisp
(setq user-mail-address "artjeremie@gmail.com")
(setq user-full-name "artjeremie")

(setq-default auth-sources '("~/.authinfo"))

(setq-default gnus-select-method
              '(nnimap "gmail"
                       (nnimap-address "imap.gmail.com")
                       (nnimap-server-port 993)))

(setq-default smtpmail-smtp-server "smtp.gmail.com")
(setq-default smtpmail-smtp-service 587)

(setq-default message-send-mail-function 'smtpmail-send-it)
(setq-default gnus-use-dribble-file nil)
(setq-default gnus-read-newsrc-file nil)
(setq-default gnus-save-newsrc-file nil)
(setq-default gnus-novice-user nil)
(setq-default gnus-expert-user t)
(setq-default message-kill-buffer-on-exit t)

(setq-default mail-header-separator (purecopy "*****"))
(setq-default message-elide-ellipsis "\n> [... %l lines elided]\n")
(setq-default compose-mail-user-agent-warnings nil)
(setq-default nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
(setq-default nnmail-expiry-wait 'immediate)
(setq-default mail-signature "artjeremie\nhttps://github.com/artjeremie\n")
(setq-default message-signature "artjeremie\nhttps://github.com/artjeremie\n")
(setq-default mm-body-charset-encoding-alist  '((utf-8 . base64)))

(setq-default gnus-thread-sort-functions
              '((not gnus-thread-sort-by-date)
                (not gnus-thread-sort-by-number)))

(setq-default message-citation-line-function 'message-insert-formatted-citation-line)
(setq-default message-ignored-cited-headers "")
(setq-default message-citation-line-format
              (concat "> From: %f\n"
                      "> Date: %a, %e %b %Y %T %z\n"
                      ">"))

(setq-default gnus-parameters
              '((".*" (display . all))))

(global-set-key (kbd "C-c m") 'gnus)
#+end_src

* Feeds
Extensible web feed reader for Emacs.

| *Keybind* | *Command*                        | *Description*               |
|---------+--------------------------------+---------------------------|
| =[b]=     | elfeed-search-browse-url       | /Open article in browser/   |
| =[G]=     | elfeed-search-fetch            | /Fetch updates from server/ |
| =[s]=     | elfeed-search-live-filter      | /Update search filter/      |
| =[c]=     | elfeed-search-clear-filter     | /Clear search filter/       |
| =[r]=     | elfeed-search-untag-all-unread | /Mark as unread/            |
| =[u]=     | elfeed-search-tag-all-unread   | /Mark as read/              |
| =[g]=     | elfeed-search-update--force    | /Refresh and remove unread/ |
| =[q]=     | elfeed-search-quit-window      | /Quit browser/              |
| =[v]=     | tlj-elfeed-play-with-mpv       | /Open youtube feeds in mpv/ |

#+begin_src emacs-lisp
(defvar elfeed-show-entry)

(cl-defstruct (elfeed-entry (:constructor elfeed-entry--create))
  "A single entry from a feed, normalized towards Atom."
  id title link date content content-type enclosures tags feed-id meta)

(autoload 'elfeed-search-selected "elfeed-search")

(defun tlj-elfeed-play-with-mpv ()
  "Open Youtube feeds in mpv."
  (interactive)
  (start-process "elfeed-mpv" nil "mpv"
                 (elfeed-entry-link
                  (or elfeed-show-entry
                      (elfeed-search-selected t)))))

(autoload 'elfeed-untag "elfeed-db")

(defun tlj-elfeed-play-with-mpv-mark-entry ()
  "Play Youtube feeds in mpv with mark entry unread."
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (start-process "elfeed-mpv" nil "mpv"
                               (elfeed-entry-link
                                (elfeed-search-selected t))))
    (mapc 'elfeed-search-update-entry entries)))

(autoload 'elfeed-search-set-filter "elfeed-search")

(defun tlj-elfeed-show-daily-feeds ()
  "Show daily feeds."
  (interactive)
  (elfeed-search-set-filter "@1-day-ago"))

(defun tlj-elfeed-show-weekly-feeds ()
  "Show weekly feeds."
  (interactive)
  (elfeed-search-set-filter "@1-week-ago"))

(defun tlj-elfeed-show-monthly-feeds ()
  "Show monthly feeds."
  (interactive)
  (elfeed-search-set-filter "@1-month-ago"))

(let ((my-feeds "c:/Users/hoaxdream/Dropbox/emacs/elfeed/feeds.el"))
  (when (file-exists-p my-feeds)
    (load my-feeds nil t)))

(setq-default elfeed-db-directory "~/.emacs.d/var/elfeed/")

(with-eval-after-load 'elfeed
  (when (boundp 'elfeed-search-mode-map)
    (define-key elfeed-search-mode-map (kbd "D") 'tlj-elfeed-show-daily-feeds)
    (define-key elfeed-search-mode-map (kbd "W") 'tlj-elfeed-show-weekly-feeds)
    (define-key elfeed-search-mode-map (kbd "M") 'tlj-elfeed-show-monthly-feeds)
    (define-key elfeed-search-mode-map (kbd "v") 'tlj-elfeed-play-with-mpv)))

(global-set-key (kbd "C-c w") 'elfeed)
#+end_src

* Org-mode
Best for keeping notes, maintaining *TODO* lists and planning projects.

** Settings
Preferred settings for =org-mode=.

#+begin_src emacs-lisp
(defconst tlj-notes-path
  (expand-file-name "notes.org" "c:/Users/hoaxdream/Dropbox/emacs/org-notes")
  "Path to personal notes file.")

(defun tlj-find-notes ()
  "Open personal notes file."
  (interactive)
  (find-file tlj-notes-path))

(setq-default org-directory `(,tlj-notes-path))
(setq-default org-default-notes-file tlj-notes-path)
(setq-default org-startup-indented nil)
(setq-default org-edit-src-content-indentation 0)
(setq-default org-src-window-setup 'current-window)
(setq-default org-reverse-note-order t)
(setq-default org-return-follows-link t)
(setq-default org-startup-with-inline-images nil)
(setq-default org-image-actual-width nil)
(setq-default org-link-descriptive t)
(setq-default org-hide-emphasis-markers t)
(setq-default org-pretty-entities t)
(setq-default org-hidden-keywords nil)
(setq-default org-auto-align-tags t)
(setq-default org-hide-leading-stars t)
(setq-default org-tags-column -115)
(setq-default org-special-ctrl-a/e t)
(setq-default org-catch-invisible-edits 'show-and-error)
(setq-default org-log-done 'time)
(setq-default org-log-redeadline 'time)
(setq-default org-log-reschedule 'time)
(setq-default org-log-into-drawer t)

;; (setq-default org-display-custom-times t)
(setq-default org-time-stamp-custom-formats
              '("<%b-%d-%y %a>" . "<%b-%d-%y %a %I:%M %p>"))

(defvar org-mode-map)

(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-,") nil))

(global-set-key (kbd "C-c n") 'tlj-find-notes)
#+end_src

** Agenda
Planning and scheduling.

#+begin_src emacs-lisp
(defconst tlj-agenda-path
  (expand-file-name "agenda.org" "c:/Users/hoaxdream/Dropbox/emacs/org-agenda")
  "Path to agenda file.")

(defun tlj-find-agenda ()
  "Open agenda file."
  (interactive)
  (find-file tlj-agenda-path))

(defun tlj-org-agenda-view-startup ()
  "Agenda view schedule on Emacs startup."
  (org-agenda nil "c"))

(setq-default org-agenda-files `(,tlj-agenda-path))
(setq-default org-agenda-include-diary t)
(setq-default org-agenda-timegrid-use-ampm 1)
(setq-default org-agenda-start-on-weekday 1)
(setq-default org-agenda-show-all-dates nil)
(setq-default org-agenda-start-with-log-mode t)
(setq-default org-agenda-window-setup 'current-window)
(setq-default org-agenda-log-into-drawer t)
(setq-default org-agenda-span 2)
(setq-default org-agenda-block-separator nil)
(setq-default org-agenda-tags-column -115)
;; (setq-default org-agenda-remove-tags t)
(setq-default org-agenda-skip-deadline-if-done t)
(setq-default org-agenda-skip-schedule-if-done t)
(setq-default org-lowest-priority ?F)
(setq-default org-default-priority ?E)

(setq-default org-todo-keywords
              '((sequence "TODO(t)"
                          "|"
                          "DONE(d!)" "STOP(s@)")))

(setq-default org-agenda-time-grid
              '((daily today require-timed)
                ()
                " ─" "----------------"))

(setq-default org-agenda-current-time-string " Now")

(setq-default org-agenda-scheduled-leaders
              '("Sched: " "Sched.%2dx: "))
(setq-default org-agenda-deadline-leaders
              '("Due: " "Due in %1d-day(s): " "Overdue %1d-day(s) ago: "))

(setq-default org-scheduled-string "SCHED:")
(setq-default org-deadline-string "DUE:")

(setq-default org-agenda-prefix-format
              '((agenda . "%i %?-12t%s")
                (todo . "%i")
                (tags . "%i")
                (search . "%i")))

(setq-default org-agenda-custom-commands
              `(("c" "Custom agenda and top priority tasks"
                 ((tags-todo "*"
                             ((org-agenda-skip-function
                               '(org-agenda-skip-if nil '(timestamp)))
                              (org-agenda-skip-function
                               `(org-agenda-skip-entry-if
                                 'notregexp ,(format "\\[#%s\\]"
                                                     (char-to-string
                                                      org-priority-highest))))
                              (org-agenda-block-separator nil)
                              (org-agenda-overriding-header "Urgent tasks\n")))
                  (agenda "" ((org-agenda-span 1)
                              (org-deadline-warning-days 0)
                              (org-agenda-block-separator nil)
                              (org-agenda-format-date "%A %-e %B %Y")
                              (org-scheduled-past-days 0)
                              (org-agenda-day-face-function
                               (lambda (date)
                                 'org-agenda-date))
                              (org-agenda-overriding-header
                               "\nToday's agenda\n")))
                  (agenda "" ((org-agenda-start-on-weekday nil)
                              (org-agenda-start-day "+1d")
                              (org-agenda-span 3)
                              (org-deadline-warning-days 0)
                              (org-agenda-block-separator nil)
                              (org-agenda-format-date "%A %-e %B %Y")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'todo 'done))
                              (org-agenda-overriding-header
                               "\nNext three days\n")))
                  (agenda "" ((org-agenda-start-on-weekday nil)
                              (org-agenda-start-day "+4d")
                              (org-agenda-span 14)
                              (org-agenda-show-all-dates nil)
                              (org-agenda-format-date "%A %-e %B %Y")
                              (org-deadline-warning-days 0)
                              (org-agenda-block-separator nil)
                              (org-agenda-entry-types '(:deadline))
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'todo 'done))
                              (org-agenda-overriding-header
                               "\nUpcoming two weeks\n")))))))

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-;") 'tlj-find-agenda)

(add-hook 'after-init-hook 'tlj-org-agenda-view-startup)
#+end_src

** Capture
Quickly store notes or templates.

#+begin_src emacs-lisp
(defvar org-agenda-files)

(defun tlj-org-file-autosave-refile ()
  "Autosave capture org documents after refile."
  (interactive)
  (message "Saving org agenda document buffer...")
  (save-some-buffers t
                     (lambda ()
                       (when (member (buffer-file-name) org-agenda-files) t)))
  (message "Saving org agenda document buffer...  done!"))

(advice-add 'org-refile :after
            (lambda (&rest _)
              (tlj-org-file-autosave-refile)))

(defconst tlj-agenda-capture-directory
  "c:/Users/hoaxdream/Dropbox/emacs/org-agenda/agenda.org")

(setq-default org-capture-templates
              '(("a" "Agenda Entries")
                ("ae" "Entry Task"
                 entry (file+headline tlj-agenda-capture-directory "Inbox")
                 "** TODO %?"
                 :empty-lines-after 1 :prepend t)
                ("as" "Schedule Task"
                 entry (file+headline tlj-agenda-capture-directory "Inbox")
                 "** TODO %? \n SCHED: %^t \n"
                 :empty-lines-after 1 :prepend t)
                ("ad" "Deadline Task"
                 entry (file+headline tlj-agenda-capture-directory "Inbox")
                 "** TODO %? \n DUE: %^t \n"
                 :empty-lines-after 1 :prepend t)
                ("aw" "Schedule & Deadline"
                 entry (file+headline tlj-agenda-capture-directory "Inbox")
                 "** TODO %? \n SCHED: %^t DUE: %^t \n"
                 :empty-lines-after 1 :prepend t)
                ("r" "Repeated Task"
                 entry (file+headline tlj-agenda-capture-directory "Inbox")
                 "** TODO %? \n SCHED: %(concat \"<\" (format-time-string \"%Y-%m-%d\") \" +1d\>\")"
                 :empty-lines-after 1 :prepend t)
                ("p" "Properties Header")
                ("pc" "Category Properties"
                 entry (file tlj-agenda-capture-directory)
                 "* %?\n %^{CATEGORY}p")))

(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** Org-appear
Make invisible parts of Org elements appear visible.

#+begin_src emacs-lisp
(setq-default org-appear-autolinks t)

(add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

** Habit
Track the consistency of a special category of *TODO*, called /habit/.

#+begin_src emacs-lisp
(setq-default org-modules '(org-habit))
(setq-default org-habit-show-habits-only-for-today nil)
#+end_src

* Calendar
Birthday, anniversary and holiday reminder.

#+begin_src emacs-lisp
(setq-default diary-file "c:/Users/hoaxdream/Dropbox/emacs/diary/diary")
(setq-default calendar-mark-diary-entries-flag t)
(setq-default calendar-mark-holidays-flag t)

(setq holiday-bahai-holidays nil)
(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-oriental-holidays nil)
(setq holiday-solar-holidays nil)

(setq holiday-christian-holidays
      '((holiday-fixed 1 6 "Feast of the Three Kings")
        (holiday-easter-etc -46 "Ash Wednesday")
        (holiday-easter-etc -7 "Palm Sunday")
        (holiday-easter-etc -2 "Holy Friday")
        (holiday-easter-etc 0 "Easter Sunday")
        (holiday-easter-etc 1 "Easter Monday")
        (holiday-fixed 11 1 "All Saint's Day")
        (holiday-fixed 11 2 "Day of the Dead")
        (holiday-fixed 12 25 "Christmas Day")))

(setq holiday-general-holidays
      '((holiday-fixed 1 1 "New Year's Day")
        (holiday-fixed 2 14 "Valentine's Day")
        (holiday-fixed 10 31 "Halloween")))

(setq holiday-local-holidays
      '((holiday-fixed 2 24 "EDSA People Power Revolution")
        (holiday-fixed 4 10 "Day of Valor")
        (holiday-fixed 5 1 "Labor Day")
        (holiday-float 5 0 2 "Mother's Day")
        (holiday-fixed 6 12 "Independence Day")
        (holiday-float 6 0 3 "Father's Day")
        (holiday-fixed 8 21 "Ninoy Aquino Day")
        (holiday-fixed 8 28 "National Heroes Day")
        (holiday-fixed 11 27 "Bonifacio Day")
        (holiday-fixed 12 8 "Feast of the Immaculate Conception of Mary")
        (holiday-fixed 12 30 "Rizal Day")))
#+end_src

* Markdown
Markup language that i mostly use for some simple /readme's/.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+end_src

* Snippet
Template system for Emacs.

#+begin_src emacs-lisp
(setq-default yas-snippet-dirs '("~/.emacs.d/snippets"))
(setq-default yas-verbosity 2)

(global-set-key (kbd "C-c s") 'yas-insert-snippet)

(add-hook 'after-init-hook 'yas-global-mode)
#+end_src

* Completion
Preferred completions.

** Corfu
Enhances completion at point with a small completion popup.

#+begin_src emacs-lisp
(setq-default corfu-auto t)
(setq-default corfu-quit-no-match 'separator)
(setq-default corfu-popupinfo-delay 0.2)
(setq-default corfu-cycle t)
(setq-default corfu-auto-prefix 2)
(setq-default corfu-auto-delay 0.0)

(add-hook 'after-init-hook 'global-corfu-mode)
(add-hook 'after-init-hook 'corfu-popupinfo-mode)

(advice-add 'pcomplete-completions-at-point :around 'cape-wrap-silent)
(advice-add 'pcomplete-completions-at-point :around 'cape-wrap-purify)
(add-to-list 'completion-at-point-functions 'cape-dabbrev)
(add-to-list 'completion-at-point-functions 'cape-file)
#+end_src

** Vertico&Co
*Vertico* helps to rapidly complete file names, buffer names, or any other
Emacs interactions, together with *Orderless*, *Consult* and *Marginalia*.

#+begin_src emacs-lisp
(setq-default vertico-count-format '("%-5s " . "%2$s"))
(setq-default vertico-resize nil)
(setq-default vertico-cycle t)

(with-eval-after-load 'vertico
  (when (boundp 'vertico-map)
    (define-key vertico-map (kbd "DEL") 'vertico-directory-delete-char)))

(add-hook 'after-init-hook 'vertico-mode)

(setq completion-styles '(orderless))
(setq-default orderless-component-separator
              'orderless-escapable-split-on-space)
(setq completion-category-overrides
      '((file (styles basic partial-completion))))

(setq-default consult-buffer-sources
              '(consult--source-buffer))

(global-set-key (kbd "C-s") 'consult-line)
(global-set-key (kbd "C-r") 'consult-ripgrep)
(global-set-key (kbd "C-x b") 'consult-buffer)

(add-hook 'after-init-hook 'marginalia-mode)
#+end_src

* Languages
Programming languages specifics.

** Lua
Syntax for lua files.

#+begin_src emacs-lisp
(setq-default lua-indent-level 4)
(add-to-list 'auto-mode-alist '("\\.lua$'" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
#+end_src

** Python
Preferred defaults for python.

#+begin_src emacs-lisp
(setq-default python-shell-interpreter "python")
(setq-default python-indent-guess-indent-offset-verbose nil)
#+end_src

* Git
Tracks changes to a file or directory.

** Diff-hl
Display Git changes indicators in the =left-fringe=.

#+begin_src emacs-lisp
(let* ((height (frame-char-height))
       (width 2)
       (ones (1- (expt 2 width)))
       (bits (make-vector height ones)))
  (define-fringe-bitmap 'tlj-diff-hl-bitmap bits height width))

(setq-default diff-hl-show-staged-changes nil)
(setq-default diff-hl-fringe-bmp-function
              (lambda (_type _pos)
                'tlj-diff-hl-bitmap))

(add-hook 'text-mode-hook 'diff-hl-mode)
(add-hook 'prog-mode-hook 'diff-hl-mode)
(add-hook 'diff-hl-mode 'diff-hl-flydiff-mode)
(add-hook 'dired-mode-hook 'diff-hl-dired-mode)
#+end_src

* Misc
Quality of life packages.

** Emoji
Show emojis in Emacs 🍢.

#+begin_src emacs-lisp
(setq-default emojify-display-style 'unicode)
(setq-default emojify-emoji-styles '(unicode))

(global-set-key (kbd "C-c e") 'emojify-insert-emoji)

(add-hook 'after-init-hook 'global-emojify-mode)
#+end_src

** Helpful
Improves the built-in Emacs help system by providing more contextual
information.

#+begin_src emacs-lisp
(setq-default helpful-max-buffers 2)

(global-set-key [remap describe-key] 'helpful-key)
(global-set-key [remap describe-command] 'helpful-command)
(global-set-key [remap describe-variable] 'helpful-variable)
(global-set-key [remap describe-function] 'helpful-callable)
#+end_src

** Toc
Generate /table of contents/ for *Org* and *Markdown* documents.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'toc-org-mode)
(add-hook 'markdown-mode-hook 'toc-org-mode)
#+end_src

** Olivetti
Center your buffer for /aesthetics/ and /focus/.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c o") 'olivetti-mode)

(add-hook 'olivetti-mode-hook
          (lambda ()
            (interactive)
            (setq-default olivetti-body-width 90)))
#+end_src

* Elisp footer
Detect truncated versions of the file from the lack of footer line.

#+begin_src emacs-lisp
(provide 'userconfig)
;;; userconfig.el ends here
#+end_src
